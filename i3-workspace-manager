#!/bin/bash
# ##################################################
# NAME:
#   i3-workspace-manager
# DESCRIPTION:
#   Manage i3 workspaces
# AUTHOR:
#   bytebutcher
# ##################################################

APP_NAME="$(basename "${BASH_SOURCE[0]}" ".sh")"
APP_PATH="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
APP_VERSION="1.2.0"

# Path to the file containing the list of predefined workspaces. 
# This list enhances the create, move, and switch workspace functionality.
WORKSPACES_FILE="${APP_PATH}/workspaces.lst"

function error_msg() {
    echo -e "Error: $1" >&2;
}

function do_require_command() {
    local required_command="$1"
    command -v "${required_command}" >/dev/null 2>&1 || {
        error_msg "Require ${required_command} but it's not installed. Aborting."
        exit 1;
    }
}

function print_array() {
    local array=("$@")
    for i in $(seq 0 $(( ${#array[@]} -1 ))); do
        echo ${array[i]}
    done
}

function show_prompt() {
    local prompt="$1"
    shift
    rofi -dmenu -p "${prompt}" $@
}

function show_selection_prompt() {
    # Shows a selection prompt with case insensitive fuzzy search
    local prompt="$1"
    shift
    rofi -dmenu -p "${prompt}" -i -matching fuzzy -sort -sorting-method fzf $@
}

function get_windows() {
    local -n ids="$1"
    local -n titles="$2"
    local index pid program
    index=0
    while read -r window; do
        pid="$(echo "${window}" | awk '{print $3}')"
        program="$(ps -p "${pid}" -o comm=)"
        ids[$index]="$(echo "${window}" | awk '{print $1}' | xargs printf "%d")"
        titles[$index]="${program}: $(echo "${window}" | awk '{for (i=5; i<=NF; i++) print $i}')"
        ((index++))
    done <<< "$(wmctrl -l -p)"
}

function get_current_window() {
    local -n id="$1"
    local -n title="$2"
    id="$(xprop -root | awk '/_NET_ACTIVE_WINDOW\(WINDOW\)/{print $NF}' | xargs printf "%d")"
    title="$(xprop -id "${id}" | awk '/_NET_WM_NAME/{$1=$2="";print}' | cut -d'"' -f2)"
}

function get_active_workspaces() {
    i3-msg -t get_workspaces | jq -r '.[].name'
}

function get_current_workspace() {
    i3-msg -t get_workspaces | jq -r '.[] | select(.focused==true).name'
}

function get_predefined_workspaces() {
    if [[ -s "${WORKSPACES_FILE}" ]] ; then
        grep -v '^[[:space:]]*$' "${WORKSPACES_FILE}"
    fi
}

function create_workspace() {
    local workspace_name="$(show_prompt "Enter workspace name")"
    if [[ -z "${workspace_name}" ]] ; then
        error_msg "Workspace name cannot be empty."
        exit 1
    fi
    i3-msg "workspace ${workspace_name}" 1> /dev/null
}

function move_window() {
    local window_ids window_titles 
    get_windows window_ids window_titles
    local current_window_id current_window 
    get_current_window current_window_id current_window
    local window_to_move="$(echo -e "Move selected window (${current_window})\n$(print_array "${window_titles[@]}")" | show_selection_prompt "Select a window to move" -format i)"
    if [[ -z "${window_to_move}" ]] ; then
        error_msg "No window selected."
        exit 1
    fi
    case "${window_to_move}" in
        0)
            selected_window="${current_window_id}"
            ;;
        *)
            let "window_to_move -= 1"
            selected_window="${window_ids[$window_to_move]}"
            ;;
    esac

    local predefined_workspaces="$(get_predefined_workspaces)"
    local current_workspace="$(get_current_workspace)"
    local workspaces="$(echo -e "$(get_active_workspaces)\n${predefined_workspaces}" | grep -vFx "${current_workspace}" | grep -v '^[[:space:]]*$' | sort -u)"
    local workspace_to_move="$(echo -e "Move to current workspace (${current_workspace})\n${workspaces}" | show_selection_prompt "Select a workspace to move the window to")"
    if [[ -z "${workspace_to_move}" ]] ; then
        error_msg "No workspace selected."
        exit 1
    fi
    case "${workspace_to_move}" in
        "Move to current workspace (${current_workspace})")
            selected_workspace="${current_workspace}"
            ;;
        *)
            selected_workspace="${workspace_to_move}"
            ;;
    esac
    i3-msg "[id=${selected_window}] move to workspace ${selected_workspace}" 1> /dev/null
}

function switch_workspace() {
    local predefined_workspaces="$(get_predefined_workspaces)"
    local current_workspace="$(get_current_workspace)"
    local combined_workspaces="$(echo -e "$(get_active_workspaces)\n${predefined_workspaces}" | grep -vFx "${current_workspace}" | grep -v '^[[:space:]]*$' | sort -u)"
    local workspace_name="$(echo -e "${combined_workspaces}" | show_selection_prompt "Select a workspace to switch to")"
    if [[ -z "${workspace_name}" ]] ; then
        error_msg "No workspace selected."
        exit 1
    fi
    i3-msg "workspace ${workspace_name}" 1> /dev/null
}

function rename_workspace() {
    local current_workspace="$(get_current_workspace)"
    local workspace_to_rename="$(echo -e "Rename current workspace (${current_workspace})\n$(get_active_workspaces)" | show_selection_prompt "Select a workspace to rename")"
    if [[ -z "${workspace_to_rename}" ]] ; then
        error_msg "No workspace selected."
        exit 1
    fi
    case "${workspace_to_rename}" in
        "Rename current workspace (${current_workspace})")
            local old_name="${current_workspace}"
            ;;
        *)
            local old_name="${workspace_to_rename}"
            ;;
    esac
    local new_name="$(show_prompt "Enter new name for ${old_name}")"
    if [[ -z "${new_name}" ]] ; then
        error_msg "New name is empty."
        exit 1
    fi
    i3-msg "rename workspace \"${old_name}\" to \"${new_name}\"" &> /dev/null
}

function delete_workspace() {
    local current_workspace="$(get_current_workspace)"
    local workspace_index="$(get_active_workspaces | show_selection_prompt "Select a workspace to delete" -format i)"
    if [[ -z "${workspace_index}" ]] ; then
        error_msg "No workspace selected."
        exit 1
    fi
    local workspace_name="$(i3-msg -t get_workspaces | jq -r ".[${workspace_index}].name")"
    i3-msg "workspace ${workspace_name}  [workspace=${workspace_name}] move to workspace ${current_workspace}" 1> /dev/null
    i3-msg "workspace ${workspace_name}; kill" 1> /dev/null
    i3-msg "workspace ${current_workspace}" 1> /dev/null
}

function show_version() {
    echo "i3-workspace-manager ${APP_VERSION}"
}

function display_help() {
    echo "Usage: i3-workspace-manager [OPTION]"                        >&2
    echo "Manage i3 workspaces."                                       >&2
    echo ""                                                            >&2
    echo "Options:"                                                    >&2
    echo "  create    Create a new workspace"                          >&2
    echo "  rename    Rename an existing workspace"                    >&2
    echo "  delete    Delete an existing workspace"                    >&2
    echo "  move      Move a selected window to a selected workspace"  >&2
    echo "  switch    Switch to a selected workspace"                  >&2
    echo "  version   Show version number and quit"                    >&2
    echo "  help      Display this help message"                       >&2
}

function main() {
    case "$1" in
        create) create_workspace ;;
        rename) rename_workspace ;;
        delete) delete_workspace ;;
        move) move_window ;;
        switch) switch_workspace ;;
        version) show_version ;;
        -?|-h|--help|help) display_help ;;
        *) display_help; exit 1 ;;
    esac
}

# Used to communicate with i3 window manager.
do_require_command i3-msg
# Used to show interactive menus.
do_require_command rofi
# Used to parse json output.
do_require_command jq
# Used to retrieve window titles and ids.
do_require_command xprop
# Used to retrieve window titles and ids.
do_require_command wmctrl

main "$@"
